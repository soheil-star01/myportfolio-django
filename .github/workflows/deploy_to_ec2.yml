name: "ci-cd"
on:
  push:
    branches:
      - main
  pull_request:
permissions:
      id-token: write
      contents: read
      pull-requests: write
env:
  TF_LOG: INFO
  AWS_REGION: "eu-central-1"
  APP_CONTAINER_NAME: "django_app"
  ECR_REPOSITORY: "django_app"
jobs:
  preparation:
    runs-on: ubuntu-latest
    permissions: write-all
    outputs:
      NEWEC2PUBLICIP: ${{ steps.set-ip.outputs.NEWEC2PUBLICIP }}
      PRIVATEKEY: ${{ steps.privatekey.outputs.result }}
      PRIVKEY: ${{ steps.set-ip2.outputs.PRIVKEY }}
      INSTANCE_ID: ${{ steps.set-ip.outputs.INSTANCE_ID }}
      SECURITY_GROUP_ID: ${{ steps.set-ip.outputs.SECURITY_GROUP_ID }}
      KEY_PAIR_NAME: ${{ steps.set-ip.outputs.KEY_PAIR_NAME }}
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Git checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Delete existing Key Pair (if exists)
        run: |
          if aws ec2 describe-key-pairs --key-name "django-key"; then
            echo "Deleting existing key pair..."
            aws ec2 delete-key-pair --key-name "django-key"
          else
            echo "Key pair 'django-key' does not exist, continuing..."
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform fmt
        id: fmt
        working-directory: configs/terraform
        run: terraform fmt
        continue-on-error: true

      - name: Terraform Init
        id: init
        working-directory: configs/terraform
        env:
          AWS_BUCKET_NAME: "tf-state-manu16082023"
          AWS_BUCKET_KEY_NAME: "remote-state"
        run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${{env.AWS_BUCKET_KEY_NAME}}" -backend-config="region=${{env.AWS_REGION}}"

      - name: Terraform Import Key Pair
        working-directory: configs/terraform
        run: |
          terraform import aws_key_pair.django_key_pair django-key || true

      - name: Terraform Import Security Group
        working-directory: configs/terraform
        run: |
          SG_ID=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=allow_ssh" --query 'SecurityGroups[0].GroupId' --output text)
          terraform import aws_security_group.allow_ssh $SG_ID || true

      - name: Terraform Import Route 53 DNS Record
        working-directory: configs/terraform
        run: |
          ZONE_ID=$(aws route53 list-hosted-zones --query "HostedZones[?Name=='samdolat.com.'].Id" --output text | cut -d'/' -f3)
          terraform import aws_route53_record.django_dns ${ZONE_ID}_samdolat.com_A || true

      - name: Terraform Validate
        id: validate
        working-directory: configs/terraform
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: configs/terraform
        run: terraform plan -no-color

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        working-directory: configs/terraform
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

      - name: Set Output
        id: set-ip
        working-directory: configs/terraform
        run: |
          echo "NEWEC2PUBLICIP=$(terraform-bin output -json | jq -r '.new_public_ip.value')" >> $GITHUB_OUTPUT
          echo "INSTANCE_ID=$(terraform-bin output -json | jq -r '.instance_id.value')" >> $GITHUB_OUTPUT
          echo "SECURITY_GROUP_ID=$(terraform-bin output -json | jq -r '.security_group_id.value')" >> $GITHUB_OUTPUT
          echo "KEY_PAIR_NAME=$(terraform-bin output -json | jq -r '.key_pair_name.value')" >> $GITHUB_OUTPUT

      - name: Update Route 53 DNS Record
        run: |
          ZONE_ID=$(aws route53 list-hosted-zones --query "HostedZones[?Name=='samdolat.com.'].Id" --output text | cut -d'/' -f3)
          aws route53 change-resource-record-sets --hosted-zone-id $ZONE_ID --change-batch '{
            "Changes": [{
              "Action": "UPSERT",
              "ResourceRecordSet": {
                "Name": "samdolat.com",
                "Type": "A",
                "TTL": 300,
                "ResourceRecords": [{"Value": "'"${{ steps.set-ip.outputs.NEWEC2PUBLICIP }}"'"}]
              }
            }]
          }'
      - name: Print Public IP
        run: |
          echo "Public IP: ${{ steps.set-ip.outputs.NEWEC2PUBLICIP }}"

      - name: Set Output2
        id: set-ip2
        working-directory: configs/terraform
        run: |
          delimiter="$(openssl rand -hex 8)"
          echo "PRIVKEY<<${delimiter}" >> "${GITHUB_OUTPUT}"
          # Fetch the private key from terraform-bin output
          echo "$(terraform-bin output -json | jq -r '.private_key.value')" >> "${GITHUB_OUTPUT}"
          echo "${delimiter}" >> "${GITHUB_OUTPUT}"

      - name: Wait for EC2 to be ready
        run: |
          INSTANCE_ID=${{ steps.set-ip.outputs.INSTANCE_ID }}
          echo "Waiting for instance $INSTANCE_ID to enter 'running' state..."
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID --region ${{ env.AWS_REGION }}
          echo "Instance is now running. Waiting for status checks to pass..."
          aws ec2 wait instance-status-ok --instance-ids $INSTANCE_ID --region ${{ env.AWS_REGION }}
          echo "EC2 instance $INSTANCE_ID is ready."

  deploy:
    runs-on: ubuntu-latest
    needs: [preparation]
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Use the value
        id: use_value
        run: |
          echo "I'm running on ${{ needs.deploy.outputs.NEWEC2PUBLICIP }}" 
          echo "${{ needs.deploy.outputs.PRIVKEY }}" > ec2_private.pem
          chmod 600 ec2_private.pem  # Make sure the key has the correct permissions

      - name: Install Docker and Set Up Permissions
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ needs.deploy.outputs.NEWEC2PUBLICIP }}
          username: "ec2-user"
          key_path: "ec2_private.pem"
          port: "22"
          script: |
            whoami
            sudo yum update -y
            sudo yum install -y git
            sudo yum install -y docker
            sudo service docker start
            sudo usermod -aG docker ec2-user  # Add user to docker group
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            sudo systemctl enable docker
            sudo systemctl restart docker

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon EC2 via SSH and clone the repository
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ needs.deploy.outputs.NEWEC2PUBLICIP }}
          username: "ec2-user"
          key_path: "ec2_private.pem"
          port: "22"
          script: |
            whoami
            docker --version
            docker-compose --version
            
            git clone https://github.com/soheil-star01/myportfolio-django.git
            cd myportfolio-django
    
            # Prepare environment for Django app
            cat <<EOF > .env
            SECRET_KEY="${{ secrets.SECRET_KEY }}"
            DJANGO_SUPERUSER_USERNAME="${{ secrets.DJANGO_SUPERUSER_USERNAME }}"
            DJANGO_SUPERUSER_PASSWORD="${{ secrets.DJANGO_SUPERUSER_PASSWORD }}"
            DJANGO_SUPERUSER_EMAIL="${{ secrets.DJANGO_SUPERUSER_EMAIL }}"
            LETSENCRYPT_EMAIL="${{ secrets.LETSENCRYPT_EMAIL }}"
            EOF
  
            if [ -f .env ]; then
              echo ".env file created successfully"
            else
              echo "Failed to create .env file"
            fi
            
            # Copy initial HTTP Nginx config to run without SSL
            cp ./configs/nginx/nginx.http.conf ./configs/nginx/nginx.conf
            docker-compose up -d nginx


      # Run Certbot to obtain SSL certificates
      - name: Run Certbot to Obtain SSL Certificates
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ needs.deploy.outputs.NEWEC2PUBLICIP }}
          username: "ec2-user"
          key_path: "ec2_private.pem"
          port: "22"
          script: |
            cd myportfolio-django
            docker-compose run certbot

      # Update Nginx configuration for HTTPS after Certbot issues certificates
      - name: Switch Nginx to HTTPS mode
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ needs.deploy.outputs.NEWEC2PUBLICIP }}
          username: "ec2-user"
          key_path: "ec2_private.pem"
          port: "22"
          script: |
            cd myportfolio-django
            # Switch to HTTPS Nginx config
            cp ./configs/nginx/nginx.https.conf ./configs/nginx/nginx.conf
            docker-compose restart nginx

      # Restart Nginx with HTTPS
      - name: Final Nginx Restart with HTTPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ needs.deploy.outputs.NEWEC2PUBLICIP }}
          username: "ec2-user"
          key_path: "ec2_private.pem"
          port: "22"
          script: |
            cd myportfolio-django
            docker-compose restart nginx