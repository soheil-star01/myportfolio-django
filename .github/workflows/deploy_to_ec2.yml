name: "Github action"
on:
  push:
    branches:
      - feature/ci-cd
  pull_request:
permissions:
      id-token: write
      contents: read
      pull-requests: write
env:
  TF_LOG: INFO
  AWS_REGION: "eu-central-1"
  APP_CONTAINER_NAME: "django_app"
  ECR_REPOSITORY: "django_app"
jobs:
  docker-creation:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Git checkout
        uses: actions/checkout@v3    

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
            role-to-assume: ${{ secrets.AWS_ROLE }}
            aws-region: ${{ env.AWS_REGION }}
  
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1.7.0
        with:
          mask-password: 'true'
  
      - name: Build and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: django_app
          IMAGE_TAG: latest
        run: |
          echo $ECR_REGISTRY  && echo $ECR_REPOSITORY && echo $IMAGE_TAG
          docker build -t $ECR_REPOSITORY .
          docker tag $ECR_REPOSITORY $ECR_REGISTRY/$ECR_REPOSITORY
          docker push $ECR_REGISTRY/$ECR_REPOSITORY
  deploy:
    runs-on: ubuntu-latest
    permissions: write-all
    needs: [docker-creation]
    outputs:
      NEWEC2PUBLICIP: ${{ steps.set-ip.outputs.NEWEC2PUBLICIP }}
      PRIVATEKEY: ${{ steps.privatekey.outputs.result }}
      PRIVKEY: ${{ steps.set-ip2.outputs.PRIVKEY }}
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform fmt
        id: fmt
        working-directory: configs/terraform
        run: terraform fmt
        continue-on-error: true

      - name: Terraform Init
        id: init
        working-directory: configs/terraform
        env:
          AWS_BUCKET_NAME: "tf-state-manu16082023"
          AWS_BUCKET_KEY_NAME: "remote-state"
        run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${{env.AWS_BUCKET_KEY_NAME}}" -backend-config="region=${{env.AWS_REGION}}"

      - name: Terraform Validate
        id: validate
        working-directory: configs/terraform
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: configs/terraform
        run: terraform plan -no-color
        if: github.event_name == 'pull_request'
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>
      
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
      
            </details>
      
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      
            <details><summary>Show Plan</summary>
      
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
      
            </details>
      
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
      
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        working-directory: configs/terraform
        if: github.ref == 'refs/heads/feature/ci-cd' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

      - name: Set Output
        id: set-ip
        working-directory: configs/terraform
        run: |
            NEWEC2PUBLICIP=$(terraform output -json | jq -r '.new_public_ip.value')
            INSTANCE_ID=$(terraform output -json | jq -r '.instance_id.value')
            echo "NEWEC2PUBLICIP=${NEWEC2PUBLICIP}" >> $GITHUB_OUTPUT
            echo "INSTANCE_ID=${INSTANCE_ID}" >> $GITHUB_OUTPUT

      - name: Print Public IP
        run: |
          echo "Public IP: ${{ steps.set-ip.outputs.NEWEC2PUBLICIP }}"

      - name: Set Output2
        id: set-ip2
        working-directory: configs/terraform
        run: |
          delimiter="$(openssl rand -hex 8)"
          echo "PRIVKEY<<${delimiter}" >> "${GITHUB_OUTPUT}"
          echo "$(terraform-bin output -json  | jq  -r '.ec2_private_key.value')" >> "${GITHUB_OUTPUT}"
          echo "${delimiter}" >> "${GITHUB_OUTPUT}"   

      - name: Wait for EC2 to be ready
        run: |
          INSTANCE_ID=${{ steps.set-ip.outputs.INSTANCE_ID }}
          echo "Waiting for instance $INSTANCE_ID to enter 'running' state..."
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID --region ${{ env.AWS_REGION }}
          echo "Instance is now running. Waiting for status checks to pass..."
          aws ec2 wait instance-status-ok --instance-ids $INSTANCE_ID --region ${{ env.AWS_REGION }}
          echo "EC2 instance $INSTANCE_ID is ready."

  pull-docker-image:
    runs-on: ubuntu-latest
    needs: [deploy]
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Use the value
        id: use_value
        run: |
          echo "I'm running on ${{ needs.deploy.outputs.NEWEC2PUBLICIP }}" 
          echo "${{ needs.deploy.outputs.PRIVKEY }}" > ec2_private.pem

      - name: SSH Action
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ needs.deploy.outputs.NEWEC2PUBLICIP }}
          username: "ubuntu"
          key_path:  ec2_private.pem
          port: "22"
          script: |
            whoami

            # Log in to ECR to ensure the instance can pull the latest image
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

            # Stop any existing containers (if any)
            docker-compose down || true

            # Pull the latest image from ECR
            docker-compose pull

            # Remove dangling images to free up space
            docker rmi $(docker images --filter "dangling=true" -q --no-trunc) || true

            # Start the containers using docker-compose
            docker-compose up -d