name: "Github action"
on:
  push:
    branches:
      - feature/ci-cd
  pull_request:
permissions:
      id-token: write
      contents: read
      pull-requests: write
env:
  TF_LOG: INFO
  AWS_REGION: "eu-central-1"
  APP_CONTAINER_NAME: "django_app"
  ECR_REPOSITORY: "django_app"
jobs:
  docker-creation:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Git checkout
        uses: actions/checkout@v3    

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
            role-to-assume: ${{ secrets.AWS_ROLE }}
            aws-region: ${{ env.AWS_REGION }}
  
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1.7.0
        with:
          mask-password: 'true'
  
      - name: Build and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: django_app
          IMAGE_TAG: latest
        run: |
          echo $ECR_REGISTRY  && echo $ECR_REPOSITORY && echo $IMAGE_TAG
          docker build -t $ECR_REPOSITORY .
          docker tag $ECR_REPOSITORY $ECR_REGISTRY/$ECR_REPOSITORY
          docker push $ECR_REGISTRY/$ECR_REPOSITORY
  deploy:
    runs-on: ubuntu-latest
    permissions: write-all
    needs: [docker-creation]
    outputs:
      NEWEC2PUBLICIP: ${{ steps.set-ip.outputs.NEWEC2PUBLICIP }}
      PRIVATEKEY: ${{ steps.privatekey.outputs.result }}
      PRIVKEY: ${{ steps.set-ip2.outputs.PRIVKEY }}
      INSTANCE_ID: ${{ steps.set-ip.outputs.INSTANCE_ID }}
      SECURITY_GROUP_ID: ${{ steps.set-ip.outputs.SECURITY_GROUP_ID }}
      KEY_PAIR_NAME: ${{ steps.set-ip.outputs.KEY_PAIR_NAME }}
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform fmt
        id: fmt
        working-directory: configs/terraform
        run: terraform fmt
        continue-on-error: true

      - name: Terraform Init
        id: init
        working-directory: configs/terraform
        env:
          AWS_BUCKET_NAME: "tf-state-manu16082023"
          AWS_BUCKET_KEY_NAME: "remote-state"
        run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${{env.AWS_BUCKET_KEY_NAME}}" -backend-config="region=${{env.AWS_REGION}}"

      - name: Terraform Validate
        id: validate
        working-directory: configs/terraform
        run: terraform validate -no-color

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        working-directory: configs/terraform
        if: github.ref == 'refs/heads/feature/ci-cd' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

      - name: Set Output
        id: set-ip
        working-directory: configs/terraform
        run: |
          echo "NEWEC2PUBLICIP=$(terraform-bin output  -json | jq  -r '.new_public_ip.value')" >> $GITHUB_OUTPUT
          echo "INSTANCE_ID=$(terraform-bin output  -json | jq  -r '.instance_id.value')" >> $GITHUB_OUTPUT
          echo "SECURITY_GROUP_ID=$(terraform-bin output  -json | jq  -r '.security_group_id.value')" >> $GITHUB_OUTPUT
          echo "KEY_PAIR_NAME=$(terraform-bin output  -json | jq  -r '.key_pair_name.value')" >> $GITHUB_OUTPUT

      - name: Print Public IP
        run: |
          echo "Public IP: ${{ steps.set-ip.outputs.NEWEC2PUBLICIP }}"

      - name: Set Output2
        id: set-ip2
        working-directory: configs/terraform
        run: |
          delimiter="$(openssl rand -hex 8)"
          echo "PRIVKEY<<${delimiter}" >> "${GITHUB_OUTPUT}"
          # Fetch the private key from terraform-bin output
          echo "$(terraform-bin output -json | jq -r '.private_key.value')" >> "${GITHUB_OUTPUT}"
          echo "${delimiter}" >> "${GITHUB_OUTPUT}"

      - name: Wait for EC2 to be ready
        run: |
          INSTANCE_ID=${{ steps.set-ip.outputs.INSTANCE_ID }}
          echo "Waiting for instance $INSTANCE_ID to enter 'running' state..."
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID --region ${{ env.AWS_REGION }}
          echo "Instance is now running. Waiting for status checks to pass..."
          aws ec2 wait instance-status-ok --instance-ids $INSTANCE_ID --region ${{ env.AWS_REGION }}
          echo "EC2 instance $INSTANCE_ID is ready."

  pull-docker-image:
    runs-on: ubuntu-latest
    needs: [deploy]
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Use the value
        id: use_value
        run: |
          echo "I'm running on ${{ needs.deploy.outputs.NEWEC2PUBLICIP }}" 
          echo "${{ needs.deploy.outputs.PRIVKEY }}" > ec2_private.pem
          chmod 600 ec2_private.pem  # Make sure the key has the correct permissions
#          cat ec2_private.pem  # Optional: print the key for debugging (ensure it's valid PEM format)

      - name: SSH Action
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ needs.deploy.outputs.NEWEC2PUBLICIP }}
          username: "ec2-user"
          key_path: ec2_private.pem
          port: "22"
          script: |
            whoami
  
            sudo yum update -y
            sudo yum install -y docker
            sudo service docker start
            sudo usermod -a -G docker ec2-user
                 
            newgrp docker

            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
  
            # Verify installation
            aws --version
            docker --version
            docker-compose --version
  
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}

  
            # Log in to ECR to pull Docker images
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
            
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/django_app:latest
            
            docker-compose up -d

      - name: Cleanup on Failure - Delete Key Pair, Security Group, and Instance
        if: failure()
        run: |
          # Delete EC2 instance
          INSTANCE_ID=${{ needs.deploy.outputs.INSTANCE_ID }}
          echo "Terminating EC2 instance $INSTANCE_ID..."
          aws ec2 terminate-instances --instance-ids $INSTANCE_ID --region ${{ env.AWS_REGION }}
          aws ec2 wait instance-terminated --instance-ids $INSTANCE_ID --region ${{ env.AWS_REGION }}
          echo "Instance $INSTANCE_ID terminated."

          # Delete Security Group
          SECURITY_GROUP_ID=${{ needs.deploy.outputs.SECURITY_GROUP_ID }}
          echo "Deleting security group $SECURITY_GROUP_ID..."
          aws ec2 delete-security-group --group-id $SECURITY_GROUP_ID --region ${{ env.AWS_REGION }}
          echo "Security group $SECURITY_GROUP_ID deleted."

          # Delete Key Pair
          KEY_PAIR_NAME=${{ needs.deploy.outputs.KEY_PAIR_NAME }}
          echo "Deleting key pair $KEY_PAIR_NAME..."
          aws ec2 delete-key-pair --key-name $KEY_PAIR_NAME --region ${{ env.AWS_REGION }}
          echo "Key pair $KEY_PAIR_NAME deleted."